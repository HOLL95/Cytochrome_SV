import sys
sys.path.append("..")
import numpy as np
from multiplotter import multiplot
import matplotlib.pyplot as plt
import sys
from harmonics_plotter import harmonics
import os
import math
import copy
import pints
import time
from single_e_class_unified import single_electron
from scipy.integrate import odeint
directory=os.getcwd()
dir_list=directory.split("/")
data_loc=("/").join(dir_list[:-2])+"/Experiment_data/Alice_2_11_20/PSV"
files=os.listdir(data_loc)
experimental_dict={}
param_file=open(data_loc+"/PSV_params", "r")
harms=list(range(3,11))
useful_params=dict(zip(["max", "min", "Amp[0]", "Freq[0]"], ["E_reverse", "E_start", "d_E", "original_omega"]))
#figure=multiplot(1,2, **{"harmonic_position":[1], "num_harmonics":len(harms), "orientation":"portrait",  "plot_width":5,"plot_height":3, "row_spacing":1,"col_spacing":1, "plot_height":1, "harmonic_spacing":1})

#plt.show()
dec_amount=2
for line in param_file:
    split_line=line.split()
    if split_line[0] in useful_params.keys():
        experimental_dict[useful_params[split_line[0]]]=float(split_line[1])
def one_tail(series):
    if len(series)%2==0:
        return series[:len(series)//2]
    else:
        return series[:len(series)//2+1]
def single_oscillation_plot(times, data, colour, label="", alpha=1, ax=None):
    end_time=int(times[-1]//1)-1
    start_time=3
    if ax==None:
        ax=plt.subplots()
    for i in range(start_time, end_time):
        data_plot=data[np.where((times>=i) & (times<(i+1)))]
        time_plot=np.linspace(0, 1, len(data_plot))
        if i==start_time:
            ax.plot(time_plot, data_plot, color=colour, label=label, alpha=alpha)
        else:
            ax.plot(time_plot, data_plot, color=colour, alpha=alpha)
for i in range(1, 2):
    file_name="PSV_Cyt_{0}_cv_".format(i)
    current_data_file=np.loadtxt(data_loc+"/"+file_name+"current")
    voltage_data_file=np.loadtxt(data_loc+"/"+file_name+"voltage")
    volt_data=voltage_data_file[0::dec_amount, 1]
    param_list={
        "E_0":-0.2,
        'E_start':  min(volt_data[len(volt_data)//4:3*len(volt_data)//4]), #(starting dc voltage - V)
        'E_reverse':max(volt_data[len(volt_data)//4:3*len(volt_data)//4]),
        'omega':9.015120071612014, #8.88480830076,  #    (frequency Hz)
        "original_omega":9.015120071612014,
        'd_E': 299*1e-3,   #(ac voltage amplitude - V) freq_range[j],#
        'area': 0.07, #(electrode surface area cm^2)
        'Ru': 1.0,  #     (uncompensated resistance ohms)
        'Cdl': 1e-5, #(capacitance parameters)
        'CdlE1': 0,#0.000653657774506,
        'CdlE2': 0,#0.000245772700637,
        "CdlE3":0,
        'gamma': 1e-11,
        "original_gamma":1e-11,        # (surface coverage per unit area)
        'k_0': 10, #(reaction rate s-1)
        'alpha': 0.5,
        "E0_mean":0.2,
        "E0_std": 0.09,
        "E0_skew":0.2,
        "cap_phase":0,
        "alpha_mean":0.5,
        "alpha_std":1e-3,
        'sampling_freq' : (1.0/2400),
        'phase' :3*math.pi/2,
        "time_end": -1,
        'num_peaks': 30,
    }
    print(param_list["E_start"], param_list["E_reverse"])
    print(param_list)
    solver_list=["Bisect", "Brent minimisation", "Newton-Raphson", "inverted"]
    likelihood_options=["timeseries", "fourier"]
    time_start=2/(param_list["original_omega"])
    simulation_options={
        "no_transient":time_start,
        "numerical_debugging": False,
        "experimental_fitting":True,
        "dispersion":False,
        "dispersion_bins":[10],
        "GH_quadrature":True,
        "test": False,
        "method": "sinusoidal",
        "phase_only":False,
        "likelihood":likelihood_options[1],
        "numerical_method": solver_list[1],
        "label": "MCMC",
        "optim_list":[]
    }

    other_values={
        "filter_val": 0.5,
        "harmonic_range":list(range(4,100,1)),
        "experiment_time": current_data_file[0::dec_amount, 0],
        "experiment_current": current_data_file[0::dec_amount, 1],
        "experiment_voltage":volt_data,
        "bounds_val":20000,
    }
    param_bounds={
        'E_0':[-0.1, 0.1],
        'omega':[0.95*param_list['omega'],1.05*param_list['omega']],#8.88480830076,  #    (frequency Hz)
        'Ru': [0, 1e2],  #     (uncompensated resistance ohms)
        'Cdl': [0,2e-3], #(capacitance parameters)
        'CdlE1': [-0.1,0.1],#0.000653657774506,
        'CdlE2': [-0.05,0.05],#0.000245772700637,
        'CdlE3': [-0.05,0.05],#1.10053945995e-06,
        'gamma': [0.1*param_list["original_gamma"],3*param_list["original_gamma"]],
        'k_0': [0, 2e2], #(reaction rate s-1)
        'alpha': [0.4, 0.6],
        "cap_phase":[math.pi/2, 2*math.pi],
        "E0_mean":[-0.08, 0.04],
        "E0_std": [1e-4,  0.1],
        "E0_skew": [-10, 10],
        "alpha_mean":[0.4, 0.65],
        "alpha_std":[1e-3, 0.3],
        "k0_shape":[0,1],
        "k0_scale":[0,1e4],
        'phase' : [math.pi, 2*math.pi],
    }
    cyt=single_electron(None, param_list, simulation_options, other_values, param_bounds)
    del current_data_file
    del voltage_data_file
    cyt.define_boundaries(param_bounds)
    time_results=cyt.other_values["experiment_time"]
    current_results=cyt.other_values["experiment_current"]
    print(current_results[0], current_results[-1])
    voltage_results=cyt.other_values["experiment_voltage"]
    h_class=harmonics(harms , 1, 0.05)
    #h_class.plot_harmonics(times=time_results, experimental_time_series=current_results, xaxis=voltage_results)
    fft=one_tail(np.fft.fft(current_results))
    hann_fft=one_tail(np.fft.fft(np.multiply(np.hanning(len(current_results)),current_results)))
    f=one_tail(np.fft.fftfreq(len(time_results), time_results[1]-time_results[0]))
    predicted_cap_params=[0.00016107247651709253, 0.0032886486609914056, 0.0009172547160104724]
    cap_param_list=["Cdl", "CdlE1", "CdlE2"]
    #for i in range(0, len(cap_param_list)):
    #    cyt.param_bounds[cap_param_list[i]]=[predicted_cap_params[i]*0.75, predicted_cap_params[i]*1.25]
    cyt.def_optim_list(["E0_mean","E0_std","k_0","Ru","Cdl","CdlE1", "CdlE2","CdlE3","gamma","omega","cap_phase","phase", "alpha"])
    inferred_params=[0.09914947692931006, 999.9469476990267, 807.042914431112, 0.0001208124331619577, 0.004110808011450815, 0.0011465660548728757, 1.8241387286724777e-10, 9.015925747638107, 2.344303255727037, 3.3343889148779873, 0.40000026882147105]
    inferred_params=[0.0026892085518520903, 434.4452655954981, 7056.309660109621, 0.00012080446316527372, 0.0024666925378970194, 0.0011465681186305678, 2.595397583499278e-10, 9.01594116289882, 1.600581233850582, 4.7914694562583975, 0.4000025625960726]
    inferred_params=[-0.0831455230466103, 421.75682491012714, 7078.2779711954745, 0.00012080477835014745, 0.004110694113544712, 0.0011465683948502243, 2.596730147883652e-10, 9.015930319756032, 2.1181508092892587, 5.346599955446149, 0.5999999924210264]
    inferred_params=[-0.06202878859625431, 56.47425198391122, 2659.9466646191718, 0.00012080450895231545, 0.0041108063511217634, 0.0006879436598670587, 9.999999857331693e-11, 9.015929295024732, 2.84613056627866, 5.215571873921595, 0.4019491213369458]



    inferred_params1=[-0.07963988256472493, 0.043023349442016245, 20.550878790990733, 581.5147052074157, 8.806259570340898e-05, -0.045583168350011485, -0.00011159862236990309, 0.00018619134662841048, 2.9947102043021914e-11, 9.014976375142606, 5.699844468024501, 5.18463541959069, 0.5999994350046962]
    inferred_params2=[0.015854330779485365, 0.00010572973471127643, 4.168571224132004, 5.6074022083755155, 0.0003345561135679563, 0.0065926100690500145, 0.009997313155256463, 0,1.3427034332386211e-11, 9.014559800995356, 4.846630182206618, 2.499255177374855, 0.41947372622783585]
    inferred_params1=[-0.0754834431738817, 0.051956723665820395, 55.119486465098326, 88.05561004804302, 0.0008389204673065469, -0.01816306795257791, -0.0005934688014931928, 0,2.9999992584857815e-11, 9.01352289288839, 2.0003758950893487e-06, 4.958697017811812, 0.5928665244158917]
    inferred_params3=[-0.0013908263796598846, 0.05707588002009375, 44.8541362351384, 0.9716433154407991, 0.0008286495912759453, 0.05972777738507781, 0.009719400265532396, 0,2.384154635502858e-11, 9.0148126734145, 2.3757070067547623, 2.036117357055082, 0.4357206086123241]
    inferred_params2=[-0.08250348574002123, 0.037628433600570534, 4.635568923834899, 153.10805911446752, 9.792321199260773e-05, -0.09249415046996813, 8.59651543872117e-05, 8.294496746195923e-05, 2.7796118957386284e-11, 9.014902720330452, 5.467000395496145, 5.26271311202656, 0.5999999844213646]
    inferred_params4=[-0.0799999999990753, 0.00010000016869906082, 199.99999973333968, 407.19763723823456, 0.0004065885476330935, 0.013378207608427894, 0.0064271438426738645, -0.00024379431282900432, 2.4999999999956092e-11, 9.01837073458036, 4.604582864012119, 6.283185307168381, 0.5999999999298402]
    inferred_params4=[-0.0845766560060595, 0.05888230641468616, 29.368135258252792, 462.76652631814477, 0.00018119775104960287, -0.031382453044715306, -0.0008166284829028703, 0.0001603100136706309, 4.675371504820262e-11, 9.015344833886154, 5.848155301796545, 5.21700636740392, 0.5883539746819326]
    inferred_params4=[-0.08652959381076936, 0.03361651546975455, 917.9898090933094, 287.4362918567246, 0.0005500769288191003, 0.00012969459722160515, 0.0043842322742388765, -0.0002696456371670819, 6.282218080122397e-11, 9.017091421389255, 4.62106688358605, 6.283185211049506, 0.5999998232708733]
    #inferred_params2=[-0.05495302219402323, 0.0007528350111415482, 546.2614069157116, 226.6928296330597, 0.0005599307283710613, 0.011564738442979922, 0.0011391969395035048, 7.852613720386176e-05, 5.295286950206525e-11, 9.014655963529671, 4.443216864047258, 5.034787689408343, 0.5999995493550858]
    #inferred_params4=[-0.07287204145461483, 0.07697128467576946, 23.47081102391832, 348.8309633291293, 1.2842292784353302e-05, 0.09999993175287814, 0.04269454164610892, 0.00027281405993719726, 6.947582226686721e-11, 9.016197381719124, 6.28318530710061, 5.91585805036327, 0.5427402660888593]
    inferred_params2=[-0.08250348574002123, 0.037628433600570534, 4.635568923834899, 153.10805911446752, 9.792321199260773e-05, -0.09249415046996813, 8.59651543872117e-05, 8.294496746195923e-05, 2.7796118957386284e-11, 9.014902720330452, 5.467000395496145, 5.26271311202656, 0.5999999844213646]
    inferred_params2=[-0.05897077320642114, 0.012624609618582739, 569.8770986714504, 137.37161854510956, 0.0008889805390117373, 0.008340803598526805, 0.0010715780154989737, 4.964566158449646e-05, 5.2754243128435144e-11, 9.014645134635346, 4.449177598843859, 5.024539591886025, 0.5819447228966595]
    inferred_params3=[-0.08064031224498379, 0.020906827217859487, 63.01964378454537, 112.80693965100555, 0.0007989280702348236, -0.008716352699352406, 0.0012650098345725197, -2.60067208995296e-05, 2.9678863151432805e-11, 9.014741538924035, 5.49549816495015, 5.193383660743178, 0.5999999698409333]
    inferred_params4=[-0.07133935323836932, 0.04433940419884379, 217.58306150192792, 135.0495596023161, 9.62463515705647e-06, 0.01730398477905308, 0.04999871276633058, -0.0007206743270165433, 1.37095896576959e-11, 9.01499164308653, 4.7220768639743085, 4.554136092744141, 0.5999999989106146]
    #inferred_params4=[-0.070774772146836, 0.07094568263811699, 997.837855423435, 261.97758744605716, 3.5886534009798405e-06, 0.03251994860713783, 0.042004624405509575, -0.0026088453635418757, 2.876025811848482e-11, 9.01523840545232, 4.578174337047507, 4.474544035466601, 0.5999933081587441]
    #inferred_params4=[-0.0833531335155252, 0.026167826747943934, 523.0765616147104, 283.7922776226674, 0.00048400671835917237, 0.0587261341430759*0, -0.024120612663654464*0, -0.0008797963752945545*0, 3.530521921597552e-11, 9.008499328878978, 5.595043018646865, 4.792722028810171, 0.5225248792261171]
    #inferred_params4=[-0.04004876570364635, 0.05999656967683869, 50.01410360335836, 181.13738814568842, 8.40200385814592e-06, -0.0024046389331740994, 0.003670051598449321, -0.0003290180279576769, 2.3032095397156965e-11, 9.015283163726462, 3.062120435409362, 5.899045640979416, 0.40005543993803605]
    inferred_params1_2=[-0.07944194310079784, 0.020731505332405146, 68.5323912022049, 139.23155820087183, 0.0004999989887732875, -0.009043794654171535, 0.0014723170451015448, -3.072938587382406e-05, 2.4012518494637607e-11, 9.014916458264725, 5.361938438301072, 5.0992446099064495, 0.5999998006992868]
    #inferred_params4=[-0.06019346056233922, 0.031511207048196314, 866.2972313431927, 86.66661594994132, 0.0004914497802495545, 0.009994516315692982, -0.0007464297824004559, 1.2043284408309396e-05, 1.999999996540866e-11, 9.014743647988025, 3.8312233892017518, 4.656092403702626, 0.5999864937370076]
    inferred_params2_2=[-0.07688974263309035, 0.027377978478251054, 124.68226016812127, 82.65176202767852, 0.0007178487287654843, -0.005485275534002848, 0.0012629554419994436, -1.721924369159128e-05, 1.999999965112904e-11, 9.014907846043297, 5.269613328541364, 4.96139021671786, 0.599999897192592]
    #inferred_params4=[-0.08044690012246625, 0.022513212006319627, 71.51063702747877, 94.00084616360832, 0.000995750148155389, -0.00801279879861539, 0.0011469689366143433, -2.1141983152383418e-05, 2.999905572672647e-11, 9.014908258513334, 5.515180102238967, 5.179783940717799, 0.5999992692222066]
    inferred_params3_2=[-0.06831815957008087, 0.01935423201770418, 611.9181114754468, 57.88088592666555, 0.0009976159740601627, 0.008786966510971385, 0.0011051756995432002, 1.499001092559332e-05, 2.2177146241798152e-11, 9.014548026476941, 2.732748862503313, 4.4950871795007625, 0.5999812172442378]

    #(last2 are e2)
            #inferred_params4=[-0.07503979607415373, 0.07848132216748681, 851.5050976432611, 99.22891658216571, 3.0333866998039336e-06, 0.09587455685552695, 0.02701527358092075, -0.003537983498638639, 3.8626157905695076e-11, 9.014399159693399, 2.9384243192535715, 4.4616749326747485, 0.40000005902720254]
    #inferred_params4=[-0.04795041893380934, 0.08657984299729762, 50.00002925707437, 299.57833107504086, 4.712750184456311e-06, -0.0999998877029374, 0.02363003401186385, -0.001004556071927079, 2.859655946359203e-11, 9.018556990604644, 4.834573247048321, 3.3981763205278934, 0.5998720425636817]
    #inferred_params4=[-0.07663668305582892, 0.03372428680600773, 82.43390238628864, 128.78478965237676, 0.0007236977530853904, -0.01671371285467714, -0.001073639811024707, 1.5450658895188596e-05, 2.999989408847057e-11, 9.014952385647184, 1.5708797788705031, 4.489151111624218, 0.4991784044278169]


    #inferred_params4=[-0.08113156693822328, 0.03718366935446521, 5.320716879639313, 203.70552961298011, 7.10549523636437e-05, -0.09999925909271166, 0.0005679789300706145, 0.00012055876881548327, 2.692997795075121e-11, 9.014895841061435, 5.436848688270153, 5.240521296127055, 0.5999999755364679]

    #inferred_params5=[-0.07853625323187724, 0.027269175434622102, 674.1086327468423, 683.9115896445196, 0.00029679893122621406, 0.022302017091411552, 0.006342394551250484, -1.5291711869952485e-06, 3.857107910802191e-11, 8.998959138011715, 3.581633456310356, 5.308122174349758, 0.5522869380547583]
    #inferred_params5=[-0.09766748985971291, 0.03999999900303489, 50.00002207362204, 299.99999999063044, 2.261112165739149e-05, 0.09999999876507168, 0.026319652578987815, -2.0407296716998258e-05, 1.7177830367934105e-11, 9.014889013721241, 3.6904969804742644, 5.733661146887124, 0.5999999856018217]
    true_data=current_results
    fourier_arg=cyt.top_hat_filter(true_data)
    inferred_params2=[-0.05897077320642114, 0.012624609618582739, 569.8770986714504, 137.37161854510956, 0.0008889805390117373, 0.008340803598526805, 0.0010715780154989737, 4.964566158449646e-05, 5.2754243128435144e-11, 9.014645134635346, 4.449177598843859, 5.024539591886025, 0.5819447228966595]
    inferred_params3=[-0.08064031224498379, 0.020906827217859487, 63.01964378454537, 112.80693965100555, 0.0007989280702348236, -0.008716352699352406, 0.0012650098345725197, -2.60067208995296e-05, 2.9678863151432805e-11, 9.014741538924035, 5.49549816495015, 5.193383660743178, 0.5999999698409333]
    inferred_params4=[-0.07133935323836932, 0.04433940419884379, 217.58306150192792, 135.0495596023161, 9.62463515705647e-06, 0.01730398477905308, 0.04999871276633058, -0.0007206743270165433, 1.37095896576959e-11, 9.01499164308653, 4.7220768639743085, 4.554136092744141, 0.5999999989106146]
    #cyt.likelihood_surfaces(inferred_params3, fourier_arg, size=30, pc=0.2, scan_parameters=["alpha"])
    foureir_guess=cyt.top_hat_filter(cyt.test_vals(inferred_params3, "timeseries"))
    print("HEY!",cyt.RMSE(fourier_arg, foureir_guess))
    cyt.likelihood_curves(inferred_params3, fourier_arg, size=30, pc=0.2)
    SV_params=[inferred_params2, inferred_params3, inferred_params4]
    #inferred_params=[0.03187867062563278, 0.06969116701277829, 0.012050656355003074, 82.21647410474317, 1.72469420131083e-07, -0.04883242153394845, 0.004128030999609754, 0.0014151610207483317, 2.2920637758207187e-11, 9.416047319295389, 2.969373244255644, 4.671111278632602, 0.45616788500383887]
    #inferred_params=[-0.07999999144394694, 0.024409440815443512, 253.28558074069952, 827.8250611861699, 0.00023133681694130937, -0.060791977750293096, 0.001999442064628966, 0.00028325222721385657, 3.999999731207636e-11, 9.012891785016324, 1.5707964023090724, 4.226847806521736, 0.5617894762344227]
    #inferred_params=[-0.08614605860190128, 0.033066810425699256, 9.143776559493839, 85.58093893409315, 0.0005641903357132811, -0.0285656373309168, 1.403143621860753e-05, 2.1145429017030426e-05, 2.999999967868859e-11, 9.014982133139004, 5.708822668319113, 5.318784521179888, 0.5999995065256548]
    #abs_inferred=[-0.054361480473910234, 1.1938162427162904, 5.612825554223359, 6.279132242381008e-05, -0.05960508058749336, -0.0469941456970518, 9.484903667725947e-05, 2.290842179325385e-11, 9.014934517711385, 6.029939256672892, 3.1640671425219287, 0.4681375155596854]
    inferred_params=[-0.0870510191586052, 0.05678465069112342, 53.919953246806955, 99.85429361608875, 0.0019951451142243095, -0.0283358696991501, 0.0005418618874457742, 3.551617250243527e-05, 6.639766741522792e-11, 9.014976375142606, 1.575641833131292, 4.391803181016431, 0.531401598152767]


    #inferred_params=[-0.06814029869959667, 0.06460046882363747, 31.566970472254624, 133.29728268103176, 0.0015535666314900132, 0.010297707550682447, 0.0005972188639768797, 7.187329758630984e-05, 1.1224085409188234e-10, 9.014901688226427, 6.224590077578523, 5.475457464484203, 0.4308630684393417]
    #inferred_params=[-0.0036581898447773653, 0.0946052166709894, 993.9664178145092, 211.65553688026074, 0.0007712999733794824, -0.029812250105455337, 0.00943410358062722, -0.0006318095856902364, 5.83588715328551e-10, 9.014896613287165, 4.816664822738622, 4.942306910392053, 0.40225140252259767]
    #inferred_params=[-0.09989882570729512, 0.06260949125501264, 636.4023458052903, 249.98514143777288, 0.0019980627830178156, 0.013091840030203888, -0.0005796911094610724, -0.00032566448129923986, 3.1948929868686524e-10, 8.692759707005802, 6.2288692608045455, 6.2711033273433845, 0.515296121671361]
    #inferred_params=[-0.0017605781840510232, 0.02657054794757411, 46.46576270169841, 249.96807068547892, 0.0014857028569380086, -0.044111019033798965, -0.023180330891663183, 0.0009914994169686678, 5.596387834984377e-11, 9.336862594991716, 2.1421207861757967, 4.809410049143447, 0.4467043027705393]

    #inferred_params=[-0.06699961098901375, 0.08000829785684155, 999.9381070763668, 637.9377780813832, 6.682849989238483e-05, 0.03963198543192556, 0.008039820830438152, -0.00015479247354173442, 2.9999989733790726e-11, 9.014880069296106, 5.109793268822989, 3.7383487498448673, 0.5999999815516894]
    #inferred_params=[-0.011695642482765736, 0.0005431301905856871, 17.033682365526122, 657.62274789892, 0.0003344754342833271, 0.06211935237279112, 0.011378825751577136, 0.0007966641770022903, 2.999999426019755e-11, 9.012279600235457, 3.570485878813792, 3.141592666805334, 0.4000002320026221]
    #inferred_params=[-0.07505468384156316, 0.007901959053950362, 701.3854429068289, 697.9427575448977, 0.00047149865332347284, -0.09983365410384258, 0.005605810784607382, 0.0013205341372878737, 2.9565230009925134e-11, 9.016585911148377, 1.8511284603018168, 3.9163709914820517, 0.5932707262759221]


    #inferred_params=[-6.710581765545509e-07, 0.01979667930212607, 524.7140601760516, 999.9072736086953, 0.00043123470635195394, 0.09992762450576159, 0.007158276142295625, -0.009917364714601813, 2.999962728753603e-11, 9.01392318066207, 5.184384283037137, 3.7799365574524577, 0.5527922428998405]


    #inferred_params=[-0.06489530855044306, 0.025901449972125516, 48.1736028007526, 68.30159798782522, 4.714982669828995e-05, 0.04335254198388333*0, -0.004699728058449013*0,0, 2.1898117688472174e-11,9.014976375142606,3*math.pi/2,3*math.pi/2, 0.5592126258301378]


    #inferred_params=[-0.04261899345311761, 22.381555395265497, 1288.6182661878825, 0.00012080655547508927, 0.004110810366477168, 0.0006879429762117952, 1.1386685166132384e-09, 9.01490124897687, 4.761022898261431, 4.125701872157008, 0.5999999960651834]
    #inferred_params=[-0.052381022493849856, 38.83009178900811, 630.2720365182151, 0.0002013405699652845, 0.0041108108134498035, 0.0006879411561647431, 1.0684972937740034e-09, 9.015279033844829, 3.4070976356125953, 5.432687270921383, 0.5742869813297893]



    colours=plt.rcParams['axes.prop_cycle'].by_key()['color']

    single_oscillation_plot(time_results, fourier_arg, colours[0], label="Experiment Data", ax=figure.axes_dict["col1"][0])




    #plt.plot(time_results, fourier_arg)
    tests=[]

    import time
    for i in range(0, len(SV_params)):
        tests.append(cyt.test_vals(SV_params[i], "timeseries"))
        start=time.time()
        cyt.RMSE(tests[i], current_results)
        print(time.time()-start)
        single_oscillation_plot(time_results, cyt.top_hat_filter(tests[i]), colours[i+1], label="SV set "+str(i+1), alpha=1-((i+1)*0.2),ax=figure.axes_dict["col1"][0])
    figure.axes_dict["col1"][0].legend()
    figure.axes_dict["col1"][0].set_xlabel("Nondimensional oscillation period")
    figure.axes_dict["col1"][0].set_ylabel("Nondimensional current")

    #plt.show()
    #plt.plot(voltage_results, current_results)
    #plt.plot(voltage_results, cmaes_test)
    #plt.show()
    #plt.plot(cmaes_test)
    #plt.show()
    print(figure.axes_dict["col2"])
    h_class.plot_harmonics(times=time_results, Experiment_Data_time_series=current_results,  xaxis=voltage_results,ylabel="Nondimensional current",xlabel="Nondimensional voltage", alpha_increment=0.1, axes_list=figure.axes_dict["col2"], **{"Parameter_set_"+str(i+1)+"_time_series":tests[i] for i in range(0, len(tests))})
    #plt.legend(loc="center", bbox_to_anchor=[0.5, 1.2])
    plt.subplots_adjust(top=0.99,
    bottom=0.11,
    left=0.06,
    right=0.98,
    hspace=0.2,
    wspace=0.2)
    plt.show()
    for i in range(0, len(tests)):
        plt.plot(voltage_results, tests[i])
    plt.plot(voltage_results, current_results)
    plt.show()
    cyt.top_hat_filter(current_results)
    plt.plot(cyt.comp_results)
    cyt.top_hat_filter(tests[0])
    plt.plot(cyt.comp_results)
    plt.show()
    if simulation_options["likelihood"]=="timeseries":
        cmaes_problem=pints.SingleOutputProblem(cyt, time_results, true_data)
    elif simulation_options["likelihood"]=="fourier":
        dummy_times=np.linspace(0, 1, len(fourier_arg))
        cmaes_problem=pints.SingleOutputProblem(cyt, dummy_times, fourier_arg)
        plt.plot(fourier_arg)
        plt.show()
    cyt.simulation_options["label"]="cmaes"
    cyt.simulation_options["test"]=False
    score = pints.SumOfSquaresError(cmaes_problem)
    CMAES_boundaries=pints.RectangularBoundaries(list(np.zeros(len(cyt.optim_list))), list(np.ones(len(cyt.optim_list))))
    num_runs=20
    for i in range(0, num_runs):
        x0=abs(np.random.rand(cyt.n_parameters()))#cyt.change_norm_group(gc4_3_low_ru, "norm")
        print(len(x0), cmaes_problem.n_parameters(), CMAES_boundaries.n_parameters(), score.n_parameters())
        cmaes_fitting=pints.OptimisationController(score, x0, sigma0=None, boundaries=CMAES_boundaries, method=pints.CMAES)
        cmaes_fitting.set_max_unchanged_iterations(iterations=200, threshold=1e-7)
        cmaes_fitting.set_parallel(not cyt.simulation_options["test"])
        found_parameters, found_value=cmaes_fitting.run()
        print(found_parameters)
        cmaes_results=cyt.change_norm_group(found_parameters[:], "un_norm")
        print(list(cmaes_results))
        cmaes_time=cyt.test_vals(cmaes_results, likelihood="fourier", test=False)
        plt.plot(cmaes_time)
        plt.plot(fourier_arg)
        plt.show()
        #plt.subplot(1,2,1)
        #plt.plot(voltage_results, cmaes_time)
        #plt.plot(voltage_results, true_data, alpha=0.5)
        #plt.show()
        #h_class.plot_harmonics(times=time_results, experimental_time_series=current_results, data_time_series=cmaes_time,  xaxis=voltage_results)
        #plt.subplot(1,2,2)
        #plt.plot(time_results, cyt.define_voltages()[cyt.time_idx:])
        #plt.plot(time_results, voltage_results)
